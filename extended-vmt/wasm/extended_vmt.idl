type TokenMetadata = struct {
  title: opt str,
  description: opt str,
  media: opt str,
  reference: opt str,
};

constructor {
  New : (name: str, symbol: str, decimals: u8);
};

service Vmt {
  Burn : (from: actor_id, id: u256, amount: u256) -> null;
  BurnBatch : (from: actor_id, ids: vec u256, amounts: vec u256) -> null;
  GrantAdminRole : (to: actor_id) -> null;
  GrantBurnerRole : (to: actor_id) -> null;
  GrantMinterRole : (to: actor_id) -> null;
  Mint : (to: actor_id, id: u256, amount: u256, token_metadata: opt TokenMetadata) -> null;
  MintBatch : (to: actor_id, ids: vec u256, amounts: vec u256, token_metadata: vec opt TokenMetadata) -> null;
  RevokeAdminRole : (from: actor_id) -> null;
  RevokeBurnerRole : (from: actor_id) -> null;
  RevokeMinterRole : (from: actor_id) -> null;
  /// Approves an `ActorId` (account) to transfer tokens on behalf of the owner (sender).
  /// If the approval is successful, it emits an `Approval` event.
  Approve : (to: actor_id) -> bool;
  /// Transfers multiple tokens in batch from one account (`from`) to another (`to`).
  /// This method transfers multiple token IDs and amounts simultaneously.
  BatchTransferFrom : (from: actor_id, to: actor_id, ids: vec u256, amounts: vec u256) -> null;
  /// Transfers tokens from one account (`from`) to another (`to`) if the sender is allowed.
  /// Emits a `Transfer` event after a successful transfer.
  TransferFrom : (from: actor_id, to: actor_id, id: u256, amount: u256) -> null;
  query Admins : () -> vec actor_id;
  query Burners : () -> vec actor_id;
  query Minters : () -> vec actor_id;
  /// Returns the token balance of an account (`account`) for a specific token ID (`id`).
  query BalanceOf : (account: actor_id, id: u256) -> u256;
  /// Returns token account balances (`accounts`) for specific token identifiers (`ids`).
  query BalanceOfBatch : (accounts: vec actor_id, ids: vec u256) -> vec u256;
  /// Returns the number of decimal places used for this token.
  query Decimals : () -> u8;
  /// Checks if a specific operator (`operator`) is approved to transfer tokens on behalf of `account`.
  /// Returns true if the operator is approved.
  query IsApproved : (account: actor_id, operator: actor_id) -> bool;
  /// Returns the name of the token.
  query Name : () -> str;
  /// Returns the symbol of the token.
  query Symbol : () -> str;
  /// Returns the total supply of tokens in circulation.
  query TotalSupply : () -> vec struct { u256, u256 };

  events {
    Minted: struct { to: actor_id, ids: vec u256, amounts: vec u256 };
    Burned: struct { from: actor_id, ids: vec u256, amounts: vec u256 };
    Approval: struct { from: actor_id, to: actor_id };
    Transfer: struct { from: actor_id, to: actor_id, ids: vec u256, amounts: vec u256 };
  }
};

