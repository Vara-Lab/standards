// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
    fn new_with_receiver_id(&self, receiver_id: ActorId) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::NewWithReceiverId>::new(
            self.remoting.clone(),
            receiver_id,
        )
    }
}
pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
        pub struct NewWithReceiverId(());
        impl NewWithReceiverId {
            #[allow(dead_code)]
            pub fn encode_call(receiver_id: ActorId) -> Vec<u8> {
                <NewWithReceiverId as ActionIo>::encode_call(&receiver_id)
            }
        }
        impl ActionIo for NewWithReceiverId {
            const ROUTE: &'static [u8] = &[
                68, 78, 101, 119, 87, 105, 116, 104, 82, 101, 99, 101, 105, 118, 101, 114, 73, 100,
            ];
            type Params = ActorId;
            type Reply = ();
        }
    }
}
pub struct QueryService<R> {
    remoting: R,
}
impl<R> QueryService<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::QueryService for QueryService<R> {
    type Args = R::Args;
    fn all_callers_from_receiver_contract_state(
        &self,
    ) -> impl Query<Output = QueryEvents, Args = R::Args> {
        RemotingAction::<_, query_service::io::AllCallersFromReceiverContractState>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn contract_owner(&self) -> impl Query<Output = ActorId, Args = R::Args> {
        RemotingAction::<_, query_service::io::ContractOwner>::new(self.remoting.clone(), ())
    }
    fn num_value_from_receiver_contract_state(
        &self,
    ) -> impl Query<Output = QueryEvents, Args = R::Args> {
        RemotingAction::<_, query_service::io::NumValueFromReceiverContractState>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn receiver_id(&self) -> impl Query<Output = Option<ActorId>, Args = R::Args> {
        RemotingAction::<_, query_service::io::ReceiverId>::new(self.remoting.clone(), ())
    }
    fn string_value_from_receiver_contract_state(
        &self,
    ) -> impl Query<Output = QueryEvents, Args = R::Args> {
        RemotingAction::<_, query_service::io::StringValueFromReceiverContractState>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn vec_string_value_from_receiver_contract_state(
        &self,
    ) -> impl Query<Output = QueryEvents, Args = R::Args> {
        RemotingAction::<_, query_service::io::VecStringValueFromReceiverContractState>::new(
            self.remoting.clone(),
            (),
        )
    }
}
pub mod query_service {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct AllCallersFromReceiverContractState(());
        impl AllCallersFromReceiverContractState {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <AllCallersFromReceiverContractState as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for AllCallersFromReceiverContractState {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 140, 65, 108, 108, 67,
                97, 108, 108, 101, 114, 115, 70, 114, 111, 109, 82, 101, 99, 101, 105, 118, 101,
                114, 67, 111, 110, 116, 114, 97, 99, 116, 83, 116, 97, 116, 101,
            ];
            type Params = ();
            type Reply = super::QueryEvents;
        }
        pub struct ContractOwner(());
        impl ContractOwner {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ContractOwner as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ContractOwner {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 52, 67, 111, 110, 116,
                114, 97, 99, 116, 79, 119, 110, 101, 114,
            ];
            type Params = ();
            type Reply = ActorId;
        }
        pub struct NumValueFromReceiverContractState(());
        impl NumValueFromReceiverContractState {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <NumValueFromReceiverContractState as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for NumValueFromReceiverContractState {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 132, 78, 117, 109, 86,
                97, 108, 117, 101, 70, 114, 111, 109, 82, 101, 99, 101, 105, 118, 101, 114, 67,
                111, 110, 116, 114, 97, 99, 116, 83, 116, 97, 116, 101,
            ];
            type Params = ();
            type Reply = super::QueryEvents;
        }
        pub struct ReceiverId(());
        impl ReceiverId {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ReceiverId as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ReceiverId {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 40, 82, 101, 99, 101,
                105, 118, 101, 114, 73, 100,
            ];
            type Params = ();
            type Reply = Option<ActorId>;
        }
        pub struct StringValueFromReceiverContractState(());
        impl StringValueFromReceiverContractState {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <StringValueFromReceiverContractState as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for StringValueFromReceiverContractState {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 144, 83, 116, 114,
                105, 110, 103, 86, 97, 108, 117, 101, 70, 114, 111, 109, 82, 101, 99, 101, 105,
                118, 101, 114, 67, 111, 110, 116, 114, 97, 99, 116, 83, 116, 97, 116, 101,
            ];
            type Params = ();
            type Reply = super::QueryEvents;
        }
        pub struct VecStringValueFromReceiverContractState(());
        impl VecStringValueFromReceiverContractState {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <VecStringValueFromReceiverContractState as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for VecStringValueFromReceiverContractState {
            const ROUTE: &'static [u8] = &[
                48, 81, 117, 101, 114, 121, 83, 101, 114, 118, 105, 99, 101, 156, 86, 101, 99, 83,
                116, 114, 105, 110, 103, 86, 97, 108, 117, 101, 70, 114, 111, 109, 82, 101, 99,
                101, 105, 118, 101, 114, 67, 111, 110, 116, 114, 97, 99, 116, 83, 116, 97, 116,
                101,
            ];
            type Params = ();
            type Reply = super::QueryEvents;
        }
    }
}
pub struct Transmitter<R> {
    remoting: R,
}
impl<R> Transmitter<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Transmitter for Transmitter<R> {
    type Args = R::Args;
    fn add_string_to_receiver_contract_vec_string(
        &mut self,
        value: String,
    ) -> impl Call<Output = TransmitterEvents, Args = R::Args> {
        RemotingAction::<_, transmitter::io::AddStringToReceiverContractVecString>::new(
            self.remoting.clone(),
            value,
        )
    }
    fn change_receiver_contract_num_value(
        &mut self,
        new_val: u64,
    ) -> impl Call<Output = TransmitterEvents, Args = R::Args> {
        RemotingAction::<_, transmitter::io::ChangeReceiverContractNumValue>::new(
            self.remoting.clone(),
            new_val,
        )
    }
    fn change_receiver_contract_string_value(
        &mut self,
        new_val: String,
    ) -> impl Call<Output = TransmitterEvents, Args = R::Args> {
        RemotingAction::<_, transmitter::io::ChangeReceiverContractStringValue>::new(
            self.remoting.clone(),
            new_val,
        )
    }
    fn num_value_from_receiver_contract(
        &mut self,
    ) -> impl Call<Output = TransmitterEvents, Args = R::Args> {
        RemotingAction::<_, transmitter::io::NumValueFromReceiverContract>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn set_receiver_contract_id(
        &mut self,
        receiver_id: ActorId,
    ) -> impl Call<Output = TransmitterEvents, Args = R::Args> {
        RemotingAction::<_, transmitter::io::SetReceiverContractId>::new(
            self.remoting.clone(),
            receiver_id,
        )
    }
    fn string_value_from_receiver_contract(
        &mut self,
    ) -> impl Call<Output = TransmitterEvents, Args = R::Args> {
        RemotingAction::<_, transmitter::io::StringValueFromReceiverContract>::new(
            self.remoting.clone(),
            (),
        )
    }
    fn vec_string_from_receiver_contract(
        &mut self,
    ) -> impl Call<Output = TransmitterEvents, Args = R::Args> {
        RemotingAction::<_, transmitter::io::VecStringFromReceiverContract>::new(
            self.remoting.clone(),
            (),
        )
    }
}
pub mod transmitter {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct AddStringToReceiverContractVecString(());
        impl AddStringToReceiverContractVecString {
            #[allow(dead_code)]
            pub fn encode_call(value: String) -> Vec<u8> {
                <AddStringToReceiverContractVecString as ActionIo>::encode_call(&value)
            }
        }
        impl ActionIo for AddStringToReceiverContractVecString {
            const ROUTE: &'static [u8] = &[
                44, 84, 114, 97, 110, 115, 109, 105, 116, 116, 101, 114, 144, 65, 100, 100, 83,
                116, 114, 105, 110, 103, 84, 111, 82, 101, 99, 101, 105, 118, 101, 114, 67, 111,
                110, 116, 114, 97, 99, 116, 86, 101, 99, 83, 116, 114, 105, 110, 103,
            ];
            type Params = String;
            type Reply = super::TransmitterEvents;
        }
        pub struct ChangeReceiverContractNumValue(());
        impl ChangeReceiverContractNumValue {
            #[allow(dead_code)]
            pub fn encode_call(new_val: u64) -> Vec<u8> {
                <ChangeReceiverContractNumValue as ActionIo>::encode_call(&new_val)
            }
        }
        impl ActionIo for ChangeReceiverContractNumValue {
            const ROUTE: &'static [u8] = &[
                44, 84, 114, 97, 110, 115, 109, 105, 116, 116, 101, 114, 120, 67, 104, 97, 110,
                103, 101, 82, 101, 99, 101, 105, 118, 101, 114, 67, 111, 110, 116, 114, 97, 99,
                116, 78, 117, 109, 86, 97, 108, 117, 101,
            ];
            type Params = u64;
            type Reply = super::TransmitterEvents;
        }
        pub struct ChangeReceiverContractStringValue(());
        impl ChangeReceiverContractStringValue {
            #[allow(dead_code)]
            pub fn encode_call(new_val: String) -> Vec<u8> {
                <ChangeReceiverContractStringValue as ActionIo>::encode_call(&new_val)
            }
        }
        impl ActionIo for ChangeReceiverContractStringValue {
            const ROUTE: &'static [u8] = &[
                44, 84, 114, 97, 110, 115, 109, 105, 116, 116, 101, 114, 132, 67, 104, 97, 110,
                103, 101, 82, 101, 99, 101, 105, 118, 101, 114, 67, 111, 110, 116, 114, 97, 99,
                116, 83, 116, 114, 105, 110, 103, 86, 97, 108, 117, 101,
            ];
            type Params = String;
            type Reply = super::TransmitterEvents;
        }
        pub struct NumValueFromReceiverContract(());
        impl NumValueFromReceiverContract {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <NumValueFromReceiverContract as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for NumValueFromReceiverContract {
            const ROUTE: &'static [u8] = &[
                44, 84, 114, 97, 110, 115, 109, 105, 116, 116, 101, 114, 112, 78, 117, 109, 86, 97,
                108, 117, 101, 70, 114, 111, 109, 82, 101, 99, 101, 105, 118, 101, 114, 67, 111,
                110, 116, 114, 97, 99, 116,
            ];
            type Params = ();
            type Reply = super::TransmitterEvents;
        }
        pub struct SetReceiverContractId(());
        impl SetReceiverContractId {
            #[allow(dead_code)]
            pub fn encode_call(receiver_id: ActorId) -> Vec<u8> {
                <SetReceiverContractId as ActionIo>::encode_call(&receiver_id)
            }
        }
        impl ActionIo for SetReceiverContractId {
            const ROUTE: &'static [u8] = &[
                44, 84, 114, 97, 110, 115, 109, 105, 116, 116, 101, 114, 84, 83, 101, 116, 82, 101,
                99, 101, 105, 118, 101, 114, 67, 111, 110, 116, 114, 97, 99, 116, 73, 100,
            ];
            type Params = ActorId;
            type Reply = super::TransmitterEvents;
        }
        pub struct StringValueFromReceiverContract(());
        impl StringValueFromReceiverContract {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <StringValueFromReceiverContract as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for StringValueFromReceiverContract {
            const ROUTE: &'static [u8] = &[
                44, 84, 114, 97, 110, 115, 109, 105, 116, 116, 101, 114, 124, 83, 116, 114, 105,
                110, 103, 86, 97, 108, 117, 101, 70, 114, 111, 109, 82, 101, 99, 101, 105, 118,
                101, 114, 67, 111, 110, 116, 114, 97, 99, 116,
            ];
            type Params = ();
            type Reply = super::TransmitterEvents;
        }
        pub struct VecStringFromReceiverContract(());
        impl VecStringFromReceiverContract {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <VecStringFromReceiverContract as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for VecStringFromReceiverContract {
            const ROUTE: &'static [u8] = &[
                44, 84, 114, 97, 110, 115, 109, 105, 116, 116, 101, 114, 116, 86, 101, 99, 83, 116,
                114, 105, 110, 103, 70, 114, 111, 109, 82, 101, 99, 101, 105, 118, 101, 114, 67,
                111, 110, 116, 114, 97, 99, 116,
            ];
            type Params = ();
            type Reply = super::TransmitterEvents;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum QueryEvents {
    ReceiverContractIdChanged,
    StringValueFromContract(String),
    NumValueFromContract(u64),
    VecStringValueFromContract(Vec<String>),
    VecActorIdValueFromContract(Vec<ActorId>),
    ErrorInReceiverContractResponse,
    ReceiverContractIdNotSpecified,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum TransmitterEvents {
    ReceiverContractIdChanged,
    StringValueChanged { new: String, old: String },
    NumValueChanged { new: u64, old: u64 },
    StringValueAdded { value_added: String },
    StringValueFromContract(String),
    NumValueFromContract(u64),
    VecStringValueFromContract(Vec<String>),
    ReceiverContractIdNotSpecified,
    ErrorInReceiverContractResponse,
    IncorrectAnswerFromReceiverContract,
}
pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
        fn new_with_receiver_id(&self, receiver_id: ActorId) -> impl Activation<Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait QueryService {
        type Args;
        fn all_callers_from_receiver_contract_state(
            &self,
        ) -> impl Query<Output = QueryEvents, Args = Self::Args>;
        fn contract_owner(&self) -> impl Query<Output = ActorId, Args = Self::Args>;
        fn num_value_from_receiver_contract_state(
            &self,
        ) -> impl Query<Output = QueryEvents, Args = Self::Args>;
        fn receiver_id(&self) -> impl Query<Output = Option<ActorId>, Args = Self::Args>;
        fn string_value_from_receiver_contract_state(
            &self,
        ) -> impl Query<Output = QueryEvents, Args = Self::Args>;
        fn vec_string_value_from_receiver_contract_state(
            &self,
        ) -> impl Query<Output = QueryEvents, Args = Self::Args>;
    }
    #[allow(clippy::type_complexity)]
    pub trait Transmitter {
        type Args;
        fn add_string_to_receiver_contract_vec_string(
            &mut self,
            value: String,
        ) -> impl Call<Output = TransmitterEvents, Args = Self::Args>;
        fn change_receiver_contract_num_value(
            &mut self,
            new_val: u64,
        ) -> impl Call<Output = TransmitterEvents, Args = Self::Args>;
        fn change_receiver_contract_string_value(
            &mut self,
            new_val: String,
        ) -> impl Call<Output = TransmitterEvents, Args = Self::Args>;
        fn num_value_from_receiver_contract(
            &mut self,
        ) -> impl Call<Output = TransmitterEvents, Args = Self::Args>;
        fn set_receiver_contract_id(
            &mut self,
            receiver_id: ActorId,
        ) -> impl Call<Output = TransmitterEvents, Args = Self::Args>;
        fn string_value_from_receiver_contract(
            &mut self,
        ) -> impl Call<Output = TransmitterEvents, Args = Self::Args>;
        fn vec_string_from_receiver_contract(
            &mut self,
        ) -> impl Call<Output = TransmitterEvents, Args = Self::Args>;
    }
}
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;
#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub QueryService<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::QueryService for QueryService<A> { type Args = A; fn all_callers_from_receiver_contract_state (& self, ) -> MockQuery<A, QueryEvents>;fn contract_owner (& self, ) -> MockQuery<A, ActorId>;fn num_value_from_receiver_contract_state (& self, ) -> MockQuery<A, QueryEvents>;fn receiver_id (& self, ) -> MockQuery<A, Option<ActorId>>;fn string_value_from_receiver_contract_state (& self, ) -> MockQuery<A, QueryEvents>;fn vec_string_value_from_receiver_contract_state (& self, ) -> MockQuery<A, QueryEvents>; } }
    mock! { pub Transmitter<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::Transmitter for Transmitter<A> { type Args = A; fn add_string_to_receiver_contract_vec_string (&mut self, value: String,) -> MockCall<A, TransmitterEvents>;fn change_receiver_contract_num_value (&mut self, new_val: u64,) -> MockCall<A, TransmitterEvents>;fn change_receiver_contract_string_value (&mut self, new_val: String,) -> MockCall<A, TransmitterEvents>;fn num_value_from_receiver_contract (&mut self, ) -> MockCall<A, TransmitterEvents>;fn set_receiver_contract_id (&mut self, receiver_id: ActorId,) -> MockCall<A, TransmitterEvents>;fn string_value_from_receiver_contract (&mut self, ) -> MockCall<A, TransmitterEvents>;fn vec_string_from_receiver_contract (&mut self, ) -> MockCall<A, TransmitterEvents>; } }
}
